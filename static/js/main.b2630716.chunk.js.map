{"version":3,"sources":["components/ThemeProvider/theme.js","components/ThemeProvider/index.js","hooks/useTimer.js","hooks/usePomodoro.js","components/Pomodoro/LengthSetter.js","components/Pomodoro/DigitalDisplay.js","components/Pomodoro/index.js","components/App.js","serviceWorker.js","index.js"],"names":["theme","responsiveFontSizes","createMuiTheme","MyThemeProvider","props","ThemeProvider","actions","initialState","timer","duration","isRunning","reducer","state","type","newDuration","Math","min","useTimer","intialDuration","intervalRef","useRef","useReducer","dispatch","increment","useCallback","stopInterval","current","clearInterval","undefined","startInterval","setInterval","start","pause","toggle","restart","reset","timeLeft","setTimerDuration","minutes","floor","seconds","Status","session","break","pad","num","String","padStart","defaultSettings","default","max","usePomodoro","doAlarm","settings","useState","breakLength","setBreakLength","sessionLength","setSessionLength","status","setStatus","toggleStatus","prev","resetTimer","setLength","value","setCurrent","isOnType","oldValue","newValue","shouldExecute","setShouldExecute","useEffect","then","displayTime","set","useStyles","makeStyles","label","lineHeight","length","fontFamily","fontSize","controlButton","padding","LengthSetter","id","toLowerCase","classes","Grid","container","spacing","item","xs","Typography","htmlFor","className","component","IconButton","onClick","size","Slider","onChange","event","aria-labelledby","DigitalDisplay","styled","div","root","display","title","flexGrow","textAlign","position","left","bottom","width","settingsGrid","settingsSlider","maxWidth","settingsButton","alignItems","justifyContent","Pomodoro","audio","play","React","showSettings","setShowSettings","window","innerWidth","innerHeight","resetEverything","currentTime","AppBar","Toolbar","variant","align","Card","CardContent","CardActions","justify","Button","color","startIcon","ExpansionPanel","expanded","isExpanded","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","sm","preload","src","ref","fullScreen","height","App","useFccTest","fccTest","FccTests","pomodoro_clock","queryParam","alignContent","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2630716.chunk.js","sourcesContent":["import { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\n\nconst theme = responsiveFontSizes(createMuiTheme());\n\nexport default theme;","import React from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\n\nconst MyThemeProvider = (props) => <ThemeProvider theme={theme} {...props} />;\n\nexport default MyThemeProvider;","import { useCallback, useRef, useReducer } from 'react';\n\nconst actions = {\n    START: 'START',\n    PAUSE: 'PAUSE',\n    INCREMENT: 'INCREMENT',\n    RESTART: 'RESTART',\n    RESET: 'RESET',\n    SET_DURATION: 'SET_DURATION',\n};\n\nconst initialState = { timer: 0, duration: 0, isRunning: false };\nexport const reducer = (state, {type, newDuration}) => {\n    const {timer, duration, isRunning} = state;\n    switch (type) {\n    case actions.START:\n    case actions.PAUSE:\n        return {\n            ...state,\n            isRunning: type === actions.START\n        };\n    case actions.INCREMENT:\n        return {\n            timer: Math.min(timer + 1, duration), \n            duration,\n            isRunning: timer + 1 < duration\n        };\n    case actions.RESTART:\n    case actions.RESET:\n        return {\n            timer: 0, \n            duration: typeof newDuration === 'number' ? newDuration : duration,\n            isRunning: type === actions.RESTART\n        };\n    case actions.SET_DURATION:\n        return {\n            timer: Math.min(timer, newDuration), \n            duration: newDuration,\n            isRunning\n        };\n    default:\n        return state;\n    }\n};\n\nconst useTimer = (intialDuration) => {\n\n    const intervalRef = useRef();\n \n    const [{ timer, duration, isRunning }, dispatch] = useReducer(reducer, { ...initialState, duration: intialDuration });\n    \n    const setTimerDuration = newDuration => {\n        dispatch({ type: actions.SET_DURATION, newDuration });\n    };\n\n    const increment = useCallback(\n        () => dispatch({ type: actions.INCREMENT }),\n        []\n    );\n\n    const stopInterval = useCallback(\n        () => {\n            if (intervalRef.current) {\n                clearInterval(intervalRef.current);\n                intervalRef.current = undefined;\n            }\n        },\n        [intervalRef]\n    );\n\n    const startInterval = useCallback(\n        () => {\n            stopInterval();\n            intervalRef.current = setInterval(() => increment(), 1000);\n        },\n        [stopInterval, intervalRef, increment]\n    );\n\n    const start = useCallback(\n        () => {\n            startInterval();\n            dispatch({ type: actions.START });\n        },\n        [startInterval]\n    );\n\n    const pause = useCallback(\n        () => {\n            stopInterval();\n            dispatch({ type: actions.PAUSE });\n        },\n        [stopInterval]\n    );\n\n    const toggle = useCallback(\n        () => {\n            if (intervalRef.current) {\n                pause();\n            } else {\n                start();\n            }\n        },\n        [pause, start]\n    );\n    \n    const restart = useCallback(\n        (newDuration) => {\n            startInterval();\n            dispatch({ type: actions.RESTART, newDuration: newDuration });\n        },\n        [startInterval]        \n    );\n\n    const reset = useCallback(\n        (newDuration) => {\n            stopInterval();\n            dispatch({ type: actions.RESET, newDuration: newDuration });\n        },\n        [stopInterval]\n    );\n\n    const timeLeft = duration - timer;\n\n    return {\n        start,\n        pause,\n        toggle,\n        restart,\n        reset,\n        setTimerDuration,\n        timeLeft,\n        minutes: Math.floor(timeLeft / 60),\n        seconds: timeLeft % 60,\n        isRunning\n    };\n};\n\nexport default useTimer;\n","import { useState, useCallback, useEffect } from 'react';\nimport useTimer from './useTimer';\n\nconst Status = {\n    session: 'Session',\n    break: 'Break'\n};\n\nfunction pad(num) {\n    return String(num).padStart(2, '0');\n}\n\nconst defaultSettings = { \n    session: {\n        min: 1,\n        default: 25,\n        max: 60\n    },\n    break: {\n        min: 1,\n        default: 5,\n        max: 60\n    }\n};\n\nconst usePomodoro = (doAlarm, settings = defaultSettings) => {\n\n    const [breakLength, setBreakLength] = useState(settings.break.default);\n    const [sessionLength, setSessionLength] = useState(settings.session.default);\n    const [status, setStatus] = useState(Status.session);\n   \n    const toggleStatus = useCallback(\n        () => {\n            setStatus(prev => {\n                const res = prev === Status.session ? Status.break : Status.session;\n                return res;\n            });\n        },\n        [setStatus]\n    );\n\n    const { toggle, restart, pause, reset: resetTimer, timeLeft, setTimerDuration, minutes, seconds, isRunning } = useTimer(sessionLength * 60);\n\n    const setLength = useCallback((type) => (value) => {\n        const setCurrent = type === 'break' ? setBreakLength : setSessionLength;\n        const { min, max } = settings[type];\n        const isOnType = Status[type] === status;\n\n        setCurrent(oldValue => {\n            const newValue = typeof value === 'number' ? value : value(oldValue);\n\n            if (min <= newValue && newValue <= max) {\n                if (isOnType) {\n                    setTimerDuration(newValue * 60);\n                }\n                return newValue;\n            } else {\n                return oldValue;\n            }\n        });\n    }, [status, settings, setTimerDuration]);\n\n    const reset = useCallback(() => {\n        setBreakLength(settings.break.default);\n        setSessionLength(settings.session.default);\n        resetTimer(settings.session.default * 60);\n        setStatus(Status.session);\n    }, [settings, resetTimer]);\n\n    const [shouldExecute, setShouldExecute] = useState(true);\n    useEffect(() => {\n        if (timeLeft > 0 && !shouldExecute) {\n            setShouldExecute(true);\n        }\n        else if (timeLeft === 0 && shouldExecute) {\n            setShouldExecute(false);\n            pause();\n            doAlarm().then(() => {\n                if (status === Status.session)\n                    restart(breakLength * 60);\n                else\n                    restart(sessionLength * 60);\n\n                toggleStatus();\n            });\n        }\n    }, [timeLeft, doAlarm, toggleStatus, resetTimer, sessionLength, breakLength, shouldExecute, restart, pause, status]);\n\n    const displayTime = `${pad(minutes)}:${pad(seconds)}`;\n    \n    return {\n        breakLength: {\n            ...settings.break,\n            current: breakLength,\n            set: setLength('break')\n        },\n        sessionLength: {\n            ...settings.session,\n            current: sessionLength,\n            set: setLength('session')\n        },\n        status,\n        displayTime,\n        toggle,\n        reset,\n        isRunning\n    };\n};\n\nexport default usePomodoro;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, IconButton, Slider, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ArrowUpward from'@material-ui/icons/ArrowUpward';\nimport ArrowDownward from'@material-ui/icons/ArrowDownward';\n\n\nconst useStyles = makeStyles(() => ({\n    label: {\n        lineHeight: 1.25\n    },\n    length: {\n        fontFamily: 'Digital',\n        fontSize: '1.25rem'\n    },\n    controlButton: {\n        padding: 0\n    }\n}));\n\nconst LengthSetter = ({label, current, min, max, set}) => {\n    const id = label.toLowerCase();\n    const classes = useStyles();\n\n    const increment = () => set(oldValue => {\n        return Math.min(oldValue + 1, max);\n    });\n    const decrement = () => set(oldValue => Math.max(oldValue - 1, min));\n\n    return (\n        <Grid container spacing={0}>\n            <Grid item xs={12}>\n                <Typography>\n                    <label id={`${id}-label`} htmlFor={`${id}-length`} className={classes.label}>{label} Length: </label>\n                    <Typography id={`${id}-length`} component='span' className={classes.length}>{current}</Typography>\n                </Typography>\n            </Grid>\n            <Grid item>\n                <IconButton id={`${id}-decrement`} onClick={decrement} size='small' className={classes.controlButton}>\n                    <ArrowDownward/>\n                </IconButton>\n            </Grid>\n            <Grid item xs>\n                <Slider \n                    value={current}\n                    min={1}\n                    max={60}\n                    onChange={(event, newValue) => set(newValue)}\n                    aria-labelledby={`${id}-label`}\n                />\n            </Grid>\n            <Grid item>\n                <IconButton id={`${id}-increment`} onClick={increment} size='small' className={classes.controlButton}>\n                    <ArrowUpward/>\n                </IconButton>\n            </Grid>\n        </Grid>\n    );\n};\n\nLengthSetter.propTypes = {\n    label: PropTypes.string.isRequired,\n    current: PropTypes.number.isRequired,\n    min: PropTypes.number.isRequired,\n    max: PropTypes.number.isRequired,\n    set: PropTypes.func.isRequired\n};\n\nexport default LengthSetter;","import styled from 'styled-components';\n\nconst DigitalDisplay = styled.div`\n    font-family: 'Digital';\n    margin: auto;\n    width: 250px;\n    font-size: 72px;\n    color: #0B0;\n    background: black;\n    line-height: 1;\n    font-weight: 100;\n    text-align: center;\n    border-radius: 10px;\n`;\n\nexport default DigitalDisplay;\n","import React, {useCallback, useRef} from 'react';\nimport usePomodoro from '../../hooks/usePomodoro';\nimport LengthSetter from './LengthSetter';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { AppBar, Button, ExpansionPanel, Grid, Typography, Toolbar, ExpansionPanelSummary, ExpansionPanelDetails, Card, CardContent, CardActions } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport PlayIcon from '@material-ui/icons/PlayCircleFilled';\nimport PauseIcon from '@material-ui/icons/PauseCircleFilled';\n\nimport DigitalDisplay from './DigitalDisplay';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        display: 'flex'\n    },\n    title: {\n        flexGrow: 1,\n        textAlign: 'center'\n    },\n    settings: {\n        position: 'fixed',\n        left: 0,\n        bottom: 0,\n        width: '100%'\n    },\n    settingsGrid: {\n\n    },\n    settingsSlider: {\n        maxWidth: 400\n    },\n    settingsButton: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n\n    }\n}));\n\n\nconst Pomodoro = () => {\n    const classes = useStyles();\n\n    const audio = useRef();\n\n    const doAlarm = useCallback(() => audio.current.play(), [audio]);\n\n    const {breakLength, sessionLength, displayTime, status, toggle, reset, isRunning} = usePomodoro(doAlarm);\n\n    const [showSettings, setShowSettings] = React.useState(true);\n\n    React.useEffect( () => {\n        //hide Settings on initial load if it covers the clock\n        if (window.innerWidth < 600) {\n            if (window.innerHeight < 750) {\n                setShowSettings(false);\n            }\n        } else {\n            if (window.innerHeight < 550) {\n                setShowSettings(false);\n            }\n        }\n    }, []);\n\n    const resetEverything = useCallback(()=> {\n        audio.current.pause();\n        audio.current.currentTime = 0;\n        reset();\n    }, [audio, reset]);\n\n    return (\n\n        <div className={classes.root}>\n            <AppBar position='fixed'>\n                <Toolbar>\n                    <Typography variant='h3' component='h1' className={classes.title} align='center'>Pomodoro Clock</Typography>\n                </Toolbar>\n            </AppBar>\n            <Card>\n                <CardContent>\n                    <DigitalDisplay id='time-left'>{displayTime}</DigitalDisplay>\n                    <Typography variant='h6' id='timer-label' align='center'>{status}</Typography>\n                </CardContent>\n                <CardActions>\n                    <Grid container justify='space-around'>\n                        <Button \n                            color='primary'\n                            id='start_stop'\n                            size='small'\n                            startIcon={isRunning ? <PauseIcon/> : <PlayIcon/>} \n                            onClick={toggle}\n                        >\n                            {isRunning ? 'Pause' : 'Play'}\n                        </Button>\n                    </Grid>\n                </CardActions>\n            </Card>\n            <ExpansionPanel\n                className={classes.settings}\n                expanded={showSettings}\n                onChange={(event, isExpanded) => setShowSettings(isExpanded)}\n            >\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls='settings-content'\n                    id='settings-header'\n                >\n                    <Typography variant='h6'>Settings</Typography>\n                </ExpansionPanelSummary>\n\n                <ExpansionPanelDetails>\n                    <Grid container justify='space-around' spacing={1} className={classes.settingsGrid}>\n                        <Grid item xs={12} sm={5} className={classes.settingsSlider}>\n                            <LengthSetter label='Break' {...breakLength}  />\n                        </Grid>\n                        <Grid item xs={12} sm={5} className={classes.settingsSlider}>\n                            <LengthSetter label='Session' {...sessionLength} />\n                        </Grid>\n                        <Grid item xs={12} sm={2} className={classes.settingsButton}>\n                            <Button variant='contained' color='secondary' id='reset' onClick={resetEverything}>Reset</Button>\n                        </Grid>\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n            <audio id=\"beep\" preload=\"auto\"\n                src='https://goo.gl/65cBl1'\n                ref={audio} />\n        </div>\n    );\n};\n\nexport default Pomodoro;","import React from 'react';\nimport { useFccTest, FccTests } from '@asteffey/react-fcc-test';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ThemeProvider from './ThemeProvider';\nimport Pomodoro from './Pomodoro';\n\nconst useStyles = makeStyles(() => ({\n    fullScreen: {\n        height: '100vh'\n    }\n}));\n\nfunction App() {\n    const classes = useStyles();\n\n    useFccTest({\n        fccTest: FccTests.pomodoro_clock,\n        queryParam: 'fcc-test'\n    });\n\n    return (\n        <ThemeProvider>\n            <Grid \n                className={classes.fullScreen}\n                container\n                alignContent='center'\n                justify='center'\n            >\n                <Pomodoro />\n            </Grid>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}